# -*- coding: utf-8 -*-
import os
import sys


def print_task_status(action):
    def decorate(fn):
        def _(self, *args):
            fn(self, *args)
            print "    %s(%d) PENDING:%d TIMER:%d" % (action, self.instance_index, len(self.pending_tasks), len(self.timer_tasks))
        return _
    return decorate


class StageController(object):

    instance_counter = 0
    STAGE_COUNT = 2

    def __init__(self, activity, pending_tasks, timer_tasks):
        super(StageController, self).__init__()

        self.instance_index = StageController.instance_counter
        StageController.instance_counter += 1

        self.activity = activity
        self.pending_tasks = pending_tasks
        self.timer_tasks = timer_tasks
        self.state_machine = None
        self.constructStateMachine()
        self.stage_no = 0
        self.counter = 0

    def onCreate(self, saved_instance_state):
        # if saved_instance_state is not None:
        #     self.stage_no = saved_instance_state['stage_no']
        #     self.counter = saved_instance_state['counter']
        self.prepareStateMachine(True, saved_instance_state)
        self.state_machine.onCreate(saved_instance_state)

    def onSaveInstanceState(self, out_instance_state):
        self.saveStateMachine(out_instance_state)
        # out_instance_state['stage_no'] = self.stage_no
        # out_instance_state['counter'] = self.counter

    def onStart(self):
        pass

    def onResume(self):
        self.state_machine.onResume()

    def onPause(self):
        self.state_machine.onPause()

    def isResumed(self):
        return self.activity.isResumed()

    def onStop(self):
        pass

    def onDestroy(self):
        pass

    def resetCounter(self):
        self.counter = 2
        print "    resetCounter: self.counter=%d" % self.counter

    def countDown(self):
        if self.counter > 0:
            self.counter -= 1
            print "    countDown: self.counter=%d" % self.counter
            return True
        else:
            return False

    def displayCounter(self):
        print "    DISPLAY: self.counter=%d" % self.counter

    def incrementStage(self):
        if self.stage_no + 1 < StageController.STAGE_COUNT:
            self.stage_no += 1
            print "    self.stage_no=%d" % self.stage_no
            return True
        else:
            return False

    def getStateNo(self):
        return self.stage_no

    def setStageNo(self, stage_no):
        self.stage_no = stage_no
        print "    self.stage_no=%d" % self.stage_no

    def onGameOver(self):
        pass

    def openGameOverDialog(self):
        pass

    @print_task_status("post")
    def post(self, action):
        if action is None:
            raise RuntimeError("action is None")

        self.pending_tasks.append(action)
        return action

    @print_task_status("postDelayed")
    def postDelayed(self, action, delayMillis):
        if action is None:
            raise RuntimeError("action is None")

        self.timer_tasks.append(action)
        return action

    @print_task_status("removeCallbacks")
    def removeCallbacks(self, task_id):
        if task_id is None:
            raise RuntimeError("task_id is None")

        self.pending_tasks[:] = [action for action in self.pending_tasks if action != task_id]
        self.timer_tasks[:] = [action for action in self.timer_tasks if action != task_id]

    def constructStateMachine(self):
        self.state_machine = StageStateMachine(self)

    # %%

    #
    # 以下の行は自動生成されているので直接編集しないでください。
    #
    # Generated by View Generator
    #

    def prepareStateMachine(self, debug_flag, saved_instance_state):
        self.state_machine.setDebugFlag(debug_flag)
        if (saved_instance_state is not None) and ('state_machine' in saved_instance_state):
            self.state_machine.restoreInstanceState(saved_instance_state['state_machine'])
        else:
            self.state_machine.enterStartState()

    def saveStateMachine(self, out_instance_state):
        out_instance_state['state_machine'] = {}
        self.state_machine.saveInstanceState(out_instance_state['state_machine'])

    # Public method for StageStateMachine

    def click(self):
        self.state_machine.click()


class StageStateMachine(object):

    class_instance_counter = 0

    ENTRY_POINT = 0
    STAGE = 1
    DISPLAYING_WARNING = 2
    PAUSED = 3
    GAME_OVER_DIALOG = 4
    GAME_OVER = 5

    GROUP_QUESTION = 0

    def __init__(self, parent_context):
        super(StageStateMachine, self).__init__()
        self.instance_index = StageStateMachine.class_instance_counter
        StageStateMachine.class_instance_counter += 1
        self.parent_context = parent_context
        self.mDebugFlag = False
        self.mInTransition = False
        self.mCurrentState = 0
        self.mGroupState = [False]
        self.mPendingState = 0
        self.mPendingEvent = None
        self.mPendingPriority = 0
        self.mDebugLevel = 2

    def getCurrentState(self):
        return self.mCurrentState

    def getCurrentStateName(self):
        return StageStateMachine.STATE_TABLE[self.mCurrentState]

    def setCurrentState(self, state):
        self.mCurrentState = state
        self.clearPendingState()
        self.debugPrintCurrentState('ENTER STATE')

    def debugPrintCurrentState(self, msg):
        state = self.mCurrentState
        if self.mDebugFlag and state < len(StageStateMachine.STATE_TABLE):
            print "StageStateMachine(%d): %s: %s" % (self.instance_index, msg, StageStateMachine.STATE_TABLE[state])

    def clearPendingState(self):
        self.mPendingEvent = None
        self.mPendingPriority = 0
        self.mPendingState = 0

    def isInTransition(self):
        return self.mInTransition

    def isDebugFlag(self):
        return self.mDebugFlag

    def setDebugFlag(self, debugFlag):
        self.mDebugFlag = debugFlag

    def getDebugLevel(self):
        return self.mDebugLevel

    def setDebugLevel(self, debugLevel):
        self.mDebugLevel = debugLevel

    def enterStartState(self):
        self.debugPrintCurrentState('START STATE')
        self.clearPendingState()

    def evaluatePendingCondition(self):
        if self.mPendingEvent is None or self.mPendingState == 0:
            return

    def saveInstanceState(self, out_instance_state):
        while True:
            break

        out_instance_state['mCurrentState'] = self.mCurrentState
        out_instance_state['mGroupState'] = self.mGroupState
        if self.mGroupState[StageStateMachine.GROUP_QUESTION]:
            out_instance_state['stage_no'] = self.parent_context.stage_no; out_instance_state['counter'] = self.parent_context.counter
        self.debugPrintCurrentState('SAVE STATE')

    def restoreInstanceState(self, saved_instance_state):
        self.mCurrentState = saved_instance_state['mCurrentState']
        self.mGroupState = saved_instance_state['mGroupState']
        self.debugPrintCurrentState('RESTORE STATE')
        if self.mGroupState[StageStateMachine.GROUP_QUESTION]:
            self.parent_context.stage_no = saved_instance_state['stage_no']; self.parent_context.counter = saved_instance_state['counter']

        while True:
            if self.mCurrentState == StageStateMachine.STAGE:
                self.startTimer1()
            break

    def onCreate(self, saved_instance_state):
        if self.mInTransition:
            raise RuntimeError("inTransition must be false. HINT: Use postOnCreate.")

        self.evaluatePendingCondition()

        self.mInTransition = True

        if self.getDebugLevel() >= 2:
            print '  onCreate'

        while True:
            # default
            break

        self.mInTransition = False

    def onResume(self):
        if self.mInTransition:
            raise RuntimeError("inTransition must be false. HINT: Use postOnResume.")

        self.evaluatePendingCondition()

        self.mInTransition = True

        if self.getDebugLevel() >= 2:
            print '  onResume'

        while True:
            if self.mCurrentState == StageStateMachine.ENTRY_POINT:
                self.setCurrentState(StageStateMachine.STAGE)
                self.startTimer1()
                # Enter group QUESTION
                self.mGroupState[StageStateMachine.GROUP_QUESTION] = True
                self.parent_context.resetCounter(); self.parent_context.setStageNo(0)
                break

            if self.mCurrentState == StageStateMachine.PAUSED:
                self.setCurrentState(StageStateMachine.STAGE)
                self.startTimer1()
                break

            # default
            break

        self.mInTransition = False

    def onPause(self):
        if self.mInTransition:
            raise RuntimeError("inTransition must be false. HINT: Use postOnPause.")

        self.evaluatePendingCondition()

        self.mInTransition = True

        if self.getDebugLevel() >= 2:
            print '  onPause'

        while True:
            if self.mCurrentState == StageStateMachine.STAGE:
                self.cancelTimer1()
                self.setCurrentState(StageStateMachine.PAUSED)
                break

            if self.mCurrentState == StageStateMachine.DISPLAYING_WARNING:
                self.setCurrentState(StageStateMachine.PAUSED)
                break

            # default
            break

        self.mInTransition = False

    def notifyTimer1Timeout(self):
        if self.mInTransition:
            raise RuntimeError("inTransition must be false. HINT: Use postNotifyTimer1Timeout.")

        self.evaluatePendingCondition()

        self.mInTransition = True

        if self.getDebugLevel() >= 2:
            print '  notify_timer1_timeout'

        while True:
            if self.mCurrentState == StageStateMachine.STAGE:
                if self.parent_context.countDown():
                    self.parent_context.displayCounter()
                elif self.parent_context.incrementStage():
                    self.cancelTimer1()
                    self.parent_context.resetCounter()
                    self.setCurrentState(StageStateMachine.DISPLAYING_WARNING)
                else:
                    self.cancelTimer1()
                    # Leave group QUESTION
                    self.mGroupState[StageStateMachine.GROUP_QUESTION] = False
                    self.setCurrentState(StageStateMachine.GAME_OVER_DIALOG)
                    self.parent_context.openGameOverDialog()
                break

            # default
            break

        self.mInTransition = False

    def click(self):
        if self.mInTransition:
            raise RuntimeError("inTransition must be false. HINT: Use postClick.")

        self.evaluatePendingCondition()

        self.mInTransition = True

        if self.getDebugLevel() >= 2:
            print '  click'

        while True:
            if self.mCurrentState == StageStateMachine.STAGE:
                if self.parent_context.incrementStage():
                    self.cancelTimer1()
                    self.setCurrentState(StageStateMachine.STAGE)
                    self.startTimer1()
                else:
                    self.cancelTimer1()
                    # Leave group QUESTION
                    self.mGroupState[StageStateMachine.GROUP_QUESTION] = False
                    self.setCurrentState(StageStateMachine.GAME_OVER_DIALOG)
                    self.parent_context.openGameOverDialog()
                break

            if self.mCurrentState == StageStateMachine.DISPLAYING_WARNING:
                self.setCurrentState(StageStateMachine.STAGE)
                self.startTimer1()
                break

            # default
            break

        self.mInTransition = False

    def notifyAnimationFinished(self):
        if self.mInTransition:
            raise RuntimeError("inTransition must be false. HINT: Use postNotifyAnimationFinished.")

        self.evaluatePendingCondition()

        self.mInTransition = True

        if self.getDebugLevel() >= 2:
            print '  notifyAnimationFinished'

        while True:
            if self.mCurrentState == StageStateMachine.DISPLAYING_WARNING:
                self.setCurrentState(StageStateMachine.STAGE)
                self.startTimer1()
                break

            # default
            break

        self.mInTransition = False

    def cancelDialog(self):
        if self.mInTransition:
            raise RuntimeError("inTransition must be false. HINT: Use postCancelDialog.")

        self.evaluatePendingCondition()

        self.mInTransition = True

        if self.getDebugLevel() >= 2:
            print '  cancelDialog'

        while True:
            if self.mCurrentState == StageStateMachine.GAME_OVER_DIALOG:
                self.setCurrentState(StageStateMachine.GAME_OVER)
                self.parent_context.onGameOver()
                break

            # default
            break

        self.mInTransition = False

    def closeDialog(self):
        if self.mInTransition:
            raise RuntimeError("inTransition must be false. HINT: Use postCloseDialog.")

        self.evaluatePendingCondition()

        self.mInTransition = True

        if self.getDebugLevel() >= 2:
            print '  closeDialog'

        while True:
            if self.mCurrentState == StageStateMachine.GAME_OVER_DIALOG:
                self.setCurrentState(StageStateMachine.GAME_OVER)
                self.parent_context.onGameOver()
                break

            # default
            break

        self.mInTransition = False

    def timer1Runner(self):
        self.notifyTimer1Timeout()
        self.parent_context.postDelayed(self.timer1Runner, 1000);

    def startTimer1(self):
        self.parent_context.postDelayed(self.timer1Runner, 1000)

    def cancelTimer1(self):
        self.parent_context.removeCallbacks(self.timer1Runner)

    STATE_TABLE = ["ENTRY_POINT", "STAGE", "DISPLAYING_WARNING", "PAUSED", "GAME_OVER_DIALOG", "GAME_OVER"]
