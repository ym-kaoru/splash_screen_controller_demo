#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import sys
import unittest
import dialog_controller
from assets.stub_android import stub_api_model
from assets.stub_android import stub_android


def print_patterns(patterns):
    def wrapper(fn):
        def _(self):
            print
            print "<<TEST>> %s" % (", ".join(patterns))
            fn(self)
        return _
    return wrapper


def run_pending_tasks(fn):
    def _(self):
        fn(self)

        while len(self.pending_tasks) > 0:
            # http://stackoverflow.com/questions/2612802/how-to-clone-or-copy-a-list-in-python
            # Use instead of a weird syntax new_list = old_list[:]
            pending_tasks = list(self.pending_tasks)
            self.pending_tasks[:] = []

            for task in pending_tasks:
                task()  # Maybe added into self.pending_tasks

    return _


class TestDialogController(unittest.TestCase):
    def setUp(self):
        super(TestDialogController, self).setUp()
        self.pending_tasks = []
        self.timer_tasks = []
        self.savedInstanceState = {}
        self.activityA = stub_android.StubActivity()
        self.activityA.delegate_instance = \
            dialog_controller.DialogController(self.activityA,
                                               self.pending_tasks, self.timer_tasks)
        self.activityB = stub_android.StubActivity()
        self.activityB.delegate_instance = \
            dialog_controller.DialogController(self.activityB,
                                               self.pending_tasks, self.timer_tasks)

    def tearDown(self):
        super(TestDialogController, self).tearDown()

    def _run_timer_tasks(self):
        timer_tasks = list(self.timer_tasks)
        self.timer_tasks[:] = []

        for task in timer_tasks:
            task()  # Maybe added into self.timer_tasks

    @run_pending_tasks
    def onCreateA(self):
        self.activityA.onCreate(None)

    @run_pending_tasks
    def onResumeA(self):
        self.activityA.onResume()

    @run_pending_tasks
    def onPauseA(self):
        self.activityA.onPause()

    @run_pending_tasks
    def onSaveInstanceStateA(self):
        self.activityA.onSaveInstanceState(self.savedInstanceState)

    @run_pending_tasks
    def onCreateB(self):
        self.activityB.onCreate(self.savedInstanceState)

    @run_pending_tasks
    def onResumeB(self):
        self.activityB.onResume()

    @run_pending_tasks
    def onPauseB(self):
        self.activityB.onPause()

    def expectInDialog(self):
        self.assertEqual('DIALOG', self.activityB.delegate_instance.state_machine.getCurrentStateName())

    @run_pending_tasks
    def closeDialog(self):
        self.activityB.delegate_instance.closeDialog()

    @run_pending_tasks
    def cancelDialog(self):
        self.activityB.delegate_instance.cancelDialog()

    def expectInClosed(self):
        self.assertEqual('CLOSED', self.activityB.delegate_instance.state_machine.getCurrentStateName())

    # %%

    #
    # 以下の行は自動生成されているので直接編集しないでください。
    #
    # Generated by Test Case Generator
    # https://rubygems.org/gems/test_case_generator
    #

    @print_patterns(['onCreateA', 'onResumeA', 'onPauseA', 'onSaveInstanceStateA', 'onCreateB', 'onResumeB', 'expectInDialog', 'closeDialog', 'onPauseB', 'expectInClosed'])
    def test_onCreateA_onResumeA_onPauseA_onSaveInstanceStateA_onCreateB_onResumeB_expectInDialog_closeDialog_onPauseB_expectInClosed(self):
        self.onCreateA()
        self.onResumeA()
        self.onPauseA()
        self.onSaveInstanceStateA()
        self.onCreateB()
        self.onResumeB()
        self.expectInDialog()
        self.closeDialog()
        self.onPauseB()
        self.expectInClosed()

    @print_patterns(['onCreateA', 'onResumeA', 'onPauseA', 'onSaveInstanceStateA', 'onCreateB', 'onResumeB', 'expectInDialog', 'cancelDialog', 'onPauseB', 'expectInClosed'])
    def test_onCreateA_onResumeA_onPauseA_onSaveInstanceStateA_onCreateB_onResumeB_expectInDialog_cancelDialog_onPauseB_expectInClosed(self):
        self.onCreateA()
        self.onResumeA()
        self.onPauseA()
        self.onSaveInstanceStateA()
        self.onCreateB()
        self.onResumeB()
        self.expectInDialog()
        self.cancelDialog()
        self.onPauseB()
        self.expectInClosed()

    @classmethod
    def checkSanity(cls):
        sane = True
        msg = []
        for method in ['onCreateA', 'onResumeA', 'onPauseA', 'onSaveInstanceStateA', 'onCreateB', 'onResumeB', 'expectInDialog', 'closeDialog', 'onPauseB', 'expectInClosed', 'cancelDialog']:
            if not hasattr(cls, method):
                msg += [
                    '    def %s(self):' % method,
                    '        pass',
                    '',
                ]
                sane = False

        if not sane:
            print cls.__name__ + ' must implement following method(s):'
            print
            print "\n".join(msg)
            raise SystemExit(1)


if __name__ == '__main__':
    TestDialogController.checkSanity()
    unittest.main()
