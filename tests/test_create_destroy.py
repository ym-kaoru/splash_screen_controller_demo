#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import sys
import unittest


class test_create_destroy(unittest.TestCase):
    def setUp(self):
        super(test_create_destroy, self).setUp()

    def tearDown(self):
        super(test_create_destroy, self).tearDown()

# %%

    #
    # 以下の行は自動生成されているので直接編集しないでください。
    #
    # Generated by Test Case Generator
    # https://rubygems.org/gems/test_case_generator
    #

    def test_onCreateA_onSaveInstanceState_onDestroyA_onCreateB_onDestroyB(self):
        self.onCreateA()
        self.onSaveInstanceState()
        self.onDestroyA()
        self.onCreateB()
        self.onDestroyB()

    def test_onCreateA_onSaveInstanceState_onCreateB_onDestroyA_onDestroyB(self):
        self.onCreateA()
        self.onSaveInstanceState()
        self.onCreateB()
        self.onDestroyA()
        self.onDestroyB()

    def test_onCreateA_onSaveInstanceState_onCreateB_onDestroyB_onDestroyA(self):
        self.onCreateA()
        self.onSaveInstanceState()
        self.onCreateB()
        self.onDestroyB()
        self.onDestroyA()

    def test_onCreateA_onSaveInstanceState_onDestroyA_onCreateB_onStartB_onStopB_onDestroyB(self):
        self.onCreateA()
        self.onSaveInstanceState()
        self.onDestroyA()
        self.onCreateB()
        self.onStartB()
        self.onStopB()
        self.onDestroyB()

    def test_onCreateA_onSaveInstanceState_onCreateB_onDestroyA_onStartB_onStopB_onDestroyB(self):
        self.onCreateA()
        self.onSaveInstanceState()
        self.onCreateB()
        self.onDestroyA()
        self.onStartB()
        self.onStopB()
        self.onDestroyB()

    def test_onCreateA_onSaveInstanceState_onCreateB_onStartB_onDestroyA_onStopB_onDestroyB(self):
        self.onCreateA()
        self.onSaveInstanceState()
        self.onCreateB()
        self.onStartB()
        self.onDestroyA()
        self.onStopB()
        self.onDestroyB()

    def test_onCreateA_onSaveInstanceState_onCreateB_onStartB_onStopB_onDestroyA_onDestroyB(self):
        self.onCreateA()
        self.onSaveInstanceState()
        self.onCreateB()
        self.onStartB()
        self.onStopB()
        self.onDestroyA()
        self.onDestroyB()

    def test_onCreateA_onSaveInstanceState_onCreateB_onStartB_onStopB_onDestroyB_onDestroyA(self):
        self.onCreateA()
        self.onSaveInstanceState()
        self.onCreateB()
        self.onStartB()
        self.onStopB()
        self.onDestroyB()
        self.onDestroyA()

    @classmethod
    def checkSanity(cls):
        sane = True
        msg = []
        for method in ['onDestroyA', 'onCreateB', 'onDestroyB', 'onStartB', 'onStopB']:
            if not hasattr(cls, method):
                msg += [
                    '    def %s(self):' % method,
                    '        pass',
                    '',
                ]
                sane = False

        if not sane:
            print cls.__name__ + ' must implement following method(s):'
            print
            print "\n".join(msg)
            raise SystemExit(1)


if __name__ == '__main__':
    test_create_destroy.checkSanity()
    unittest.main()
